from setting.conf import TG_TOKEN, admin_chat_id, options
from db import get_db_users, update_db_user, remove_db_user
from aiogram import executor
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.storage import FSMContext
import traceback
import logging


bot = Bot(TG_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class DialogStates(StatesGroup):
    WaitingForReg = State()
    WaitingForResume = State()
    
    
class DialogBayerState(StatesGroup):
    WaitingForAnswer = State()


@dp.message_handler(lambda message: message.text == "–í—ñ–¥–≥—É–∫ –Ω–∞ —Å–ø–µ—Ü –ø–æ–∑–∏—Ü—ñ—é –∑ –¥–æ–ø –ø–∏—Ç–∞–Ω–Ω—è–º–∏")
async def response_bayer(message):
    await message.answer("–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:", 
                        reply_markup=types.ReplyKeyboardMarkup(
                        resize_keyboard=True
                        ).add(*[types.KeyboardButton(label) 
                        for label in options.keys()]).add(
                        types.KeyboardButton("–ì–æ–ª–æ–≤–Ω–∞")))


    await DialogBayerState.WaitingForAnswer.set()


@dp.message_handler(lambda message: message.text == "–ì–æ–ª–æ–≤–Ω–∞", state=DialogBayerState.WaitingForAnswer)
async def handle_option_selection(message: types.Message, state: FSMContext):
    await state.finish()
    await start(message)


@dp.message_handler(lambda message: message.text in options.keys(), state=DialogBayerState.WaitingForAnswer)
async def handle_option_selection(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['current_option'] = message.text
        data['current_question_index'] = 0
        data['answers'] = []

    await process_answer(message, state)


@dp.message_handler(state=DialogBayerState.WaitingForAnswer)
async def process_answer(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['answers'].append(message.text)

        if data['current_question_index'] < len(options[data['current_option']]):
            data['current_question_index'] += 1
            await send_question(message, state)
        else:
            await update_db_user(message.chat.id, dict(zip(options[data['answers'][0]], data['answers'][1:])))
            await message.answer(f"–î—è–∫—É—î–º–æ –∑–∞ —Ç–≤—ñ–π –≤—ñ–¥–≥—É–∫! –ó–æ–≤—Å—ñ–º —Å–∫–æ—Ä–æ –º–∏ –≤–∏–π–¥–µ–º–æ –¥–æ —Ç–µ–±–µ –Ω–∞ –∑–≤'—è–∑–æ–∫ üòâ\n–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ üëã")
            await state.finish()
            await send_answers_to_admin(message.chat.id)
            await start(message)

async def send_question(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await message.answer(options[data['current_option']][data['current_question_index']])
        await DialogBayerState.WaitingForAnswer.set()


@dp.message_handler(state=DialogStates.WaitingForReg)
async def save_reg(message):
    await update_db_user(message.chat.id, {"reg": message.text})
    await DialogStates.WaitingForResume.set()
    await bot.send_message(message.chat.id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—î —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–∞–π–ª—É –∞–±–æ —Ñ–æ—Ç–æ:")
        

@dp.message_handler(state=DialogStates.WaitingForResume, content_types=types.ContentTypes.DOCUMENT | types.ContentTypes.PHOTO)
async def save_resume(message, state: FSMContext):
    if message.document:
        await update_db_user(message.chat.id, {"resume": message.document.file_id})
    elif message.photo:
        await update_db_user(message.chat.id, {"resume": message.photo[-1].file_id})

    await state.finish()
    await start(message, "–î—è–∫—É—î–º–æ! –ê —Ç–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –≤–∞–∫–∞–Ω—Å—ñ—é –≤ –º–µ–Ω—é –Ω–∏–∂—á–µ")


@dp.message_handler(state=DialogStates.WaitingForResume, content_types=types.ContentTypes.TEXT)
async def save_resume_ERRORS(message):
    await DialogStates.WaitingForResume.set()
    await bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ä–µ–∑—é–º–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–∞–π–ª—É –∞–±–æ —Ñ–æ—Ç–æ:")


async def send_answers_to_admin(telegram_id):
    users = await get_db_users()
    await bot.send_message(admin_chat_id, users[str(telegram_id)]["reg"] + "\n" + "\n".join([f"{key}: {value}" for key, value in users[str(telegram_id)].items() if key not in ['reg']]))
    try:
        await bot.send_document(admin_chat_id, users[str(telegram_id)]['resume'])
    except:
        try:
            await bot.send_photo(admin_chat_id, users[str(telegram_id)]['resume'])
        except:
            await bot.send_message(admin_chat_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—é–º–µ")


@dp.message_handler(lambda message: message.text in ["–ì–æ–ª–æ–≤–Ω–∞", "/start"])
async def start(message, message_text = "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:"):
    users = await get_db_users()
    await update_db_user(message.chat.id, {"telegram_username": message.chat.username})

    if str(message.chat.id) in users:
        if "reg" in users[str(message.chat.id)] and "resume" in users[str(message.chat.id)]:        
            await message.answer(message_text, 
                                reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton("–ü—Ä–æ—Ñ—ñ–ª—å"), 
                                    types.KeyboardButton("–í—ñ–¥–≥—É–∫ –Ω–∞ —Å–ø–µ—Ü –ø–æ–∑–∏—Ü—ñ—é –∑ –¥–æ–ø –ø–∏—Ç–∞–Ω–Ω—è–º–∏"), 
                                    types.KeyboardButton("–ó–≤–∏—á–∞–π–Ω–∏–π –≤—ñ–¥–≥—É–∫"), 
                                    types.KeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó")
                                    ))
        else:
            await message.answer("–ü—Ä–∏–≤—ñ—Ç, —Ç–∏ –∑–≤–µ—Ä–Ω—É–≤—Å—è/–∑–≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –∫–æ–º–ø–∞–Ω—ñ—é –∫–æ–º–ø–∞–Ω—ñ—è \n" \
                            "–î—è–∫—É—î–º–æ —Ç–æ–±—ñ –∑–∞ —Ç–≤–æ—é –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω—ñ—Å—Ç—å –¥–æ –Ω–∞—à–æ—ó –∫–æ–º–ø–∞–Ω—ñ—ó. –ú–∏ –±—É–¥–µ–º–æ –≤–¥—è—á–Ω—ñ –∑–∞ —Ç–≤–æ—î —Ä–µ–∑—é–º–µ, –∞–ª–µ, \n" \
                            "—Å–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω–∏ '–ü—Ä–æ—Ñ—ñ–ª—å' —Ç–∞ –Ω–∞–¥—ñ—à–ª–∏ –∞–±–æ –æ–±–µ—Ä–∏ –≤–∞–∫–∞–Ω—Å—ñ—é —è–∫–∞ —Ç–µ–±–µ –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∞. \n" \
                            "–î—è–∫—É—î–º–æ!\n" \
                            "—ñ–º—è, –†–µ–∫—Ä—É—Ç–µ—Ä –∫–æ–º–ø–∞–Ω—ñ—è", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton("–ü—Ä–æ—Ñ—ñ–ª—å")))
    else:
        await message.answer("–ü—Ä–∏–≤—ñ—Ç, —Ç–∏ –∑–≤–µ—Ä–Ω—É–≤—Å—è/–∑–≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –∫–æ–º–ø–∞–Ω—ñ—é –∫–æ–º–ø–∞–Ω—ñ—è \n" \
                            "–î—è–∫—É—î–º–æ —Ç–æ–±—ñ –∑–∞ —Ç–≤–æ—é –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω—ñ—Å—Ç—å –¥–æ –Ω–∞—à–æ—ó –∫–æ–º–ø–∞–Ω—ñ—ó. –ú–∏ –±—É–¥–µ–º–æ –≤–¥—è—á–Ω—ñ –∑–∞ —Ç–≤–æ—î —Ä–µ–∑—é–º–µ, –∞–ª–µ, \n" \
                            "—Å–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω–∏ '–ü—Ä–æ—Ñ—ñ–ª—å' —Ç–∞ –Ω–∞–¥—ñ—à–ª–∏ –∞–±–æ –æ–±–µ—Ä–∏ –≤–∞–∫–∞–Ω—Å—ñ—é —è–∫–∞ —Ç–µ–±–µ –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∞. \n" \
                            "–î—è–∫—É—î–º–æ!\n" \
                            "—ñ–º—è, –†–µ–∫—Ä—É—Ç–µ—Ä –∫–æ–º–ø–∞–Ω—ñ—è", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton("–ü—Ä–æ—Ñ—ñ–ª—å")))
        

@dp.message_handler(lambda message: message.text == "–ü—Ä–æ—Ñ—ñ–ª—å")
async def get_info(message):
    users = await get_db_users()
    if "reg" in users[str(message.chat.id)] and "resume" in users[str(message.chat.id)]:
        await bot.send_message(message.chat.id, users[str(message.chat.id)]["reg"] + "\n" + "\n".join([f"{key}: {value}" for key, value in users[str(message.chat.id)].items() if key not in ['reg']]),
                                reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å"), 
                                                                                                 types.KeyboardButton("–ì–æ–ª–æ–≤–Ω–∞")))
        
        try:
            await bot.send_document(message.chat.id, users[str(message.chat.id)]['resume'])
            return
        except:
            try:
                await bot.send_photo(message.chat.id, users[str(message.chat.id)]['resume'])
                return
            except:
                await bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—é–º–µ")
                return
    else:
        await register(message)


@dp.message_handler(lambda message: message.text in ["–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å"])
async def register(message):
    await remove_db_user(message.chat.id)
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π —Å–≤–æ—ó –¥–∞–Ω—ñ, –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –º–∏ –º–æ–≥–ª–∏ –ø–æ—à–≤–∏–¥—à–µ –∑–≤'—è–∑–∞—Ç–∏—Å—å –∑ —Ç–æ–±–æ—é üì≤\n" \
                        "1. –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ\n" \
                        "2. –¢–≤–æ—è –ø–æ—à—Ç–∞ –¥–ª—è –∑–≤'—è–∑–∫—É\n" \
                        "3. –¢–≤—ñ–π —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è –∑–≤'—è–∑–∫—É\n" \
                        "4. –¢–≤–æ—è –ª–æ–∫–∞—Ü—ñ—è\n" \
                        "5. –†–µ—Å—É—Ä—Å –¥–µ –∑–Ω–∞–π—à–æ–≤/–ª–∞ –Ω–∞—Å.")
    await DialogStates.WaitingForReg.set()


@dp.message_handler(lambda message: message.text == "–ó–≤–∏—á–∞–π–Ω–∏–π –≤—ñ–¥–≥—É–∫")
async def response_other(message):
    await message.answer("–î—è–∫—É—î–º–æ –∑–∞ —Ç–≤—ñ–π –≤—ñ–¥–≥—É–∫! –°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—å —â–æ —Ç–∏ –∑–Ω–∞–π—à–æ–≤/–ª–∞ —Ü—ñ–∫–∞–≤—É –¥–ª—è —Å–µ–±–µ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é. –í–∂–µ —á–µ–∫–∞—î–º–æ –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á –∑ —Ç–æ–±–æ—é üñ§")
    await message.answer("–ü–µ—Ä–µ—Ö–æ–¥—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —Ç–∞ –¥—ñ–∑–Ω–∞–≤–∞–π—Å—è —è–∫—ñ —â–µ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –≤ –Ω–∞—Å —î –¥–ª—è —Ç–µ–±–µ - —Å–∞–π—Ç")
    await send_answers_to_admin(message.chat.id)
    await start(message)


@dp.message_handler(lambda message: message.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó")
async def view_vacancies(message):
    await message.answer("–°–ª—ñ–¥–∫—É–π –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –≤–∞–∫–∞–Ω—Å—ñ—è–º–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º - —Å–∞–π—Ç")
    await start(message)


while True:
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        error_text = "Error: {}\n{}".format(str(e), traceback.format_exc())
        logging.error(error_text)
        bot = Bot(TG_TOKEN)
        storage = MemoryStorage()
        dp = Dispatcher(bot, storage=storage)
        print(e)
